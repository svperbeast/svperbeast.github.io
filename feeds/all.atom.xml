<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Svperbeast Blog</title><link href="http://svperbeast.github.io/" rel="alternate"></link><link href="http://svperbeast.github.io/feeds/all.atom.xml" rel="self"></link><id>http://svperbeast.github.io/</id><updated>2013-06-18T21:32:00+09:00</updated><entry><title>Pack and Unpack Binary Data</title><link href="http://svperbeast.github.io/pack-unpack-binary-data.html" rel="alternate"></link><published>2013-06-18T21:32:00+09:00</published><updated>2013-06-18T21:32:00+09:00</updated><author><name>Wonseok Choi</name></author><id>tag:svperbeast.github.io,2013-06-18:/pack-unpack-binary-data.html</id><summary type="html">&lt;p&gt;Data Structure를 (파일에 저장하고) 네트워크를 통해 전송하는 수 많은 방법들이 있다.&lt;/p&gt;
&lt;p&gt;padding없이 만든 struct, POD class 등 을 그대로 memcpy할 수도 있는데,
Endian 처리를 잘 해줘야 하며 유지보수할 때 실수를 할 가능성이 많다.&lt;/p&gt;
&lt;p&gt;플랫폼뿐만 아니라 프로그래밍 언어 사이에서도 Data를 교환할 수 있도록 한 여러 라이브러리, 프레임워크 등 이 많다.
&lt;a href="https://code.google.com/p/protobuf/"&gt;protocol …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Data Structure를 (파일에 저장하고) 네트워크를 통해 전송하는 수 많은 방법들이 있다.&lt;/p&gt;
&lt;p&gt;padding없이 만든 struct, POD class 등 을 그대로 memcpy할 수도 있는데,
Endian 처리를 잘 해줘야 하며 유지보수할 때 실수를 할 가능성이 많다.&lt;/p&gt;
&lt;p&gt;플랫폼뿐만 아니라 프로그래밍 언어 사이에서도 Data를 교환할 수 있도록 한 여러 라이브러리, 프레임워크 등 이 많다.
&lt;a href="https://code.google.com/p/protobuf/"&gt;protocol buffers&lt;/a&gt;, &lt;a href="http://thrift.apache.org/"&gt;thrift&lt;/a&gt;, &lt;a href="http://avro.apache.org/"&gt;avro&lt;/a&gt;, &lt;a href="http://msgpack.org/"&gt;MessagePack&lt;/a&gt; 등 Data Serialization뿐 아니라 low level network I/O 및 RPC 메커니즘까지 제공하는 것들도 있다.
Go는 Go로 작성된 프로그램끼리 Data를 주고받을 수 있도록 한 &lt;a href="http://blog.golang.org/gobs-of-data"&gt;gob&lt;/a&gt;이라는 패키지도 있다.
C++ boost 라이브러리에는 &lt;a href="http://www.boost.org/doc/libs/1_53_0/libs/serialization/doc/index.html"&gt;Serialization&lt;/a&gt;이 있는데, &lt;a href="http://stackoverflow.com/questions/2304061/is-it-safe-to-use-boost-serialization-to-serialize-objects-in-c-to-a-binary-fo"&gt;Binary format을 네트워크를 통해 잘 전송하는 것을 보장하지 않는다&lt;/a&gt;고 한다 (XML 등 Text 형식은 사용 가능).&lt;/p&gt;
&lt;p&gt;이러한 라이브러리들을 사용하기 위해서, 목적에 맞는 것들을 잘 선택해야 한다.
최근에 지금 일하고 있는 회사에서 MessagePack을 사용하기로 했다
(&lt;a href="http://slid.es/wonseokchoi/msgpack-asio"&gt;MessagePack 및 boost asio 사용 예&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;그런데, 이런 라이브러리들은 너무 &lt;em&gt;멋지다&lt;/em&gt;(Fancy).
&lt;a href="http://cm.bell-labs.com/cm/cs/tpop/"&gt;The Practice of Programming&lt;/a&gt;의 한 장에서 소개하는 Packet 처리 방식은 내게 좋은 영감을 주었다. printf의 타입을 명시하는 _little language_를 차용한 이 방식은 Erlang의 pattern matching이나 Python의 struct에서도 관찰할 수 있다고 생각한다.&lt;/p&gt;
&lt;p&gt;Pattern matching 연산으로 IPv4 data를 파싱하는 erlang code
(Programming Erlang - Joe Armstrong):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;Dgram&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="nx"&gt;IP_VERSION&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HLen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SrvcType&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TotLen&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Flgs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;FragOff&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TTL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Proto&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;HdrChkSum&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;SrcIP&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Packing, Unpacking three integers
(http://docs.python.org/2/library/struct.html#examples):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;struct&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hhl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x01\x00\x02\x00\x00\x00\x03&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hhl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\x00\x01\x00\x02\x00\x00\x00\x03&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pattern matching은 규칙을 명시하는 little language의 수준을 뛰어 넘는 것으로 보인다. Python struct module의 &lt;code&gt;hhl&lt;/code&gt;과 같은 문자열은 little language의 좋은 예가 된다.
The Practice of Programmig에서는 위와 같은 예를 소개하고 있다:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이 예는 어떤 상용 네트워크 프로토콜의 실제 코드에 기반한다.
필자가 일단 이 접근방식이 통할 거라고 깨닫자마자, 몇천 줄 정도 되던
반복적이고 에러가 생기기 쉬웠던 코드가, 유지보수하기 쉬운 몇백 줄 정도로
줄어들었다. 표기법이 혼란을 확 잠재운 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/svperbeast/struct"&gt;struct&lt;/a&gt;는 Python struct module과 비슷하게 구현한 C Library이다.
이 코드에 Null-terminated string, blob data 등 을 추가한 코드는 &lt;a href="https://github.com/Xsoda/struct"&gt;여기&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;</content><category term="struct"></category></entry></feed>